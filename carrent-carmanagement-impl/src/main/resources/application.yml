app.api.version: ${version}, build:${build.number}

server:
  port: 8080

carrentacl:
  enabled: true
  methodsWithAuthorizedRoles:
    ru_vtb_carrent_car_resource_CarResource_createCar:
      - "Администратор"
    ru_vtb_carrent_car_resource_CarResource_getCar:
      - "Администратор"
      - "Менеджер по прокату"
      - "Менеджер по обслуживанию"
      - "Руководитель"
    ru_vtb_carrent_car_resource_CarResource_getCars:
      - "Администратор"
      - "Менеджер по прокату"
      - "Менеджер по обслуживанию"
      - "Руководитель"
    ru_vtb_carrent_car_resource_CarResource_getCarsForRole:
      - "Администратор"
      - "Менеджер по прокату"
      - "Менеджер по обслуживанию"
      - "Руководитель"
    ru_vtb_carrent_car_resource_CarResource_updateCar:
      - "Администратор"
    ru_vtb_carrent_car_resource_CarResource_deleteCar:
      - "Администратор"
    ru_vtb_carrent_car_resource_CarResource_dropOut:
      - "Менеджер по обслуживанию"
    ru_vtb_carrent_car_resource_CarResource_onMaintenance:
      - "Менеджер по обслуживанию"
    ru_vtb_carrent_car_resource_CarResource_inStockCar:
      - "Менеджер по обслуживанию"
      - "Менеджер по прокату"
    ru_vtb_carrent_car_resource_CarResource_inRentCar:
      - "Менеджер по прокату"
    ru_vtb_carrent_car_resource_PreferencesResource_getValue:
      - "Администратор"
    ru_vtb_carrent_car_resource_PreferencesResource_updatePreferences:
      - "Администратор"

spring:
  cloud:
    config:
      enabled: false
    stream.kafka.binder.zkNodes:
      - zookeeper-1
      - zookeeper-2
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
  kafka:
    enabled: true
    bootstrap-servers: kafka-service:9092
    consumer:
      group-id: carrent
      value-deserializer: ru.vtb.carrent.car.config.CarBookingRequestDeserializer
  datasource:
      driverClassName: org.postgresql.Driver
      url: jdbc:postgresql://postgresql:5432/db?currentSchema=carmanagement
      username: carmanagement_ms
      password: carmanagement_ms
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: validate
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl

security:
  oauth2:
    resource:
      jwt:
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnGp/Q5lh0P8nPL21oMMrt2RrkT9AW5jgYwLfSUnJVc9G6uR3cXRRDCjHqWU5WYwivcF180A6CWp/ireQFFBNowgc5XaA0kPpzEtgsA5YsNX7iSnUibB004iBTfU9hZ2Rbsc8cWqynT0RyN4TP1RYVSeVKvMQk4GT1r7JCEC+TNu1ELmbNwMQyzKjsfBXyIOCFU/E94ktvsTZUHF4Oq44DBylCDsS1k7/sfZC2G5EU7Oz0mhG8+Uz6MSEQHtoIi6mc8u64Rwi3Z3tscuWG2ShtsUFuNSAFNkY7LkLn+/hxLCu2bNISMaESa8dG22CIMuIeRLVcAmEWEWH5EEforTg+QIDAQAB
          -----END PUBLIC KEY-----
eureka:
  instance:
      preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://${discovery-host}:${discovery-port}/eureka/

multipart:
  maxFileSize: 2048KB
  maxRequestSize: 2048KB

feign:
  hystrix:
    enabled: true

hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 10000

logging:
  level:
    ROOT: INFO
    ru.vtb.carrent: DEBUG
    org.springframework: INFO

---
spring:
  profiles: local
  cloud:
    kubernetes:
      discovery:
        enabled: false
    stream.kafka.binder.zkNodes:
      - localhost
  kafka:
    bootstrap-servers: localhost:9092
  datasource:
      url: jdbc:postgresql://localhost:5432/db?currentSchema=carmanagement

server:
  port: 8080

eureka:
  client:
    enabled: false

---
spring:
  profiles: test
  datasource:
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:db;INIT=CREATE SCHEMA IF NOT EXISTS car\;SET SCHEMA car;MODE=PostgreSQL;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create-drop
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl

eureka:
  client:
    enabled: false